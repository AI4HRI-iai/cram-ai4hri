(ros-load:load-system "cram_agent_interaction" :cram-agent-interaction)
(in-package :agin)

(defclass bank-account ()
    (
        
        (customer-name
            :initarg :customer-name
            :initform (error "Must supply a customer name."))
        
        (balance
            :initarg :balance
            :initform 0)
        
        (account-number
         :initform (incf *account-numbers*))

        account-type))

Do you mean: the green circle , or, the blue circle ?
#<(A INTERACTION
     (TYPE RECEIVING)
     (FROM #<(A AGENT
                (TYPE HUMAN)
                (NAME human_0)
                (ROLE Director))>)
     (MSG #<(A MESSAGE
               (TYPE REQUEST)
               (COMMUNICATED-ACTION )
               (COMMUNICATED-OBJECT NIL))>))>
PEPPER-DEMO> dt::*ctx-designate*
#("?0 isAbove table_1" "?0 isInContainer ?2" "?2 isA VisibleDtBox"
  "?0 isA Cube" "?0 hasColor blue" "?0 hasGraphicalEntity ?1" "?1 isA Circle")

sparql : #(?1 hasColor blue)
Waiting for KSP merge
query: #(?1 hasColor blue)
ctx: #(?0 isAbove table_1 ?0 isInContainer ?2 ?2 isA VisibleDtBox ?0 isA Cube
       ?0 hasColor blue ?0 hasGraphicalEntity ?1 ?1 isA Circle)
merge response: 
[MERGE-RESPONSE
   MERGED_QUERY:
     #(?1 isA Circle ?1 hasColor blue)]Question part: the blue circle 
Do you mean: the green circle , or, the blue circle ?  

#<(A INTERACTION
     (TYPE RECEIVING)
     (FROM #<(A AGENT
                (TYPE HUMAN)
                (NAME human_0)
                (ROLE Director))>)
     (MSG #<(A MESSAGE
               (TYPE REQUEST)
               (COMMUNICATED-ACTION Take)
               (COMMUNICATED-OBJECT #<(A OBJECT
                                         (TYPE CUBE)
                                         (HASCOLOR BLUE))>))>))>
PEPPER-DEMO> 


(defmethod initialize-instance :after ((account bank-account) &key)
    (let ((balance (slot-value account 'balance)))
        (setf (slot-value account 'account-type)
            (cond
                ((>= balance 100000) :gold)
                ((>= balance 50000) :silver)
                (t :bronze)))))

(defparameter *account*
    (make-instance 'bank-account :customer-name "John Doe" :balance 1000))

    (roslisp:make-msg "knowledge_sharing_planner_msgs/Triplet"
                     :from "?0"
                     :relation "isAbove"
                     :on "table_1")


  (setf triples (split-sequence:SPLIT-SEQUENCE #\Space  "?0 isAbove table_1"))            


  with-let
   (designatecube-let
     "pick the blue cube with a green triangle"
     )
Waiting for KSP Understand
understand response: 
[UNDERSTAND-RESPONSE
   SPARQLQUERY:
     #(?0 isA Cube ?0 hasColor blue ?0 hasGraphicalEntity ?1 ?1 isA Triangle
       ?1 hasColor green)
   ACTION:
     Pick
   COMPREHENSION_SCORE:
     1.0d0
   ANALYSE_SCORE:
     1.0d0]Waiting for KSP merge
query: #(?0 isA Cube ?0 hasColor blue ?0 hasGraphicalEntity ?1 ?1 isA Triangle
         ?1 hasColor green)
ctx: #(?0 isAbove table_1 ?0 isInContainer ?1 ?1 isA VisibleDtBox)
merge response: 
[MERGE-RESPONSE
   MERGED_QUERY:
     #(?0 isAbove table_1 ?0 isInContainer ?2 ?2 isA VisibleDtBox ?0 isA Cube
       ?0 hasColor blue ?0 hasGraphicalEntity ?1 ?1 isA Triangle
       ?1 hasColor green)]#(?0 isAbove table_1 ?0 isInContainer ?2
                            ?2 isA VisibleDtBox ?0 isA Cube ?0 hasColor blue
                            ?0 hasGraphicalEntity ?1 ?1 isA Triangle
                            ?1 hasColor green)
?0 isAbove table_1, ?0 isInContainer ?2, ?2 isA VisibleDtBox, ?0 isA Cube, ?0 hasColor blue, ?0 hasGraphicalEntity ?1, ?1 isA Triangle, ?1 hasColor green
ontology results: 
[ONTOLOGENIUSSPARQLSERVICE-RESPONSE
   RESULTS:
     #([ONTOLOGENIUSSPARQLRESPONSE
          NAMES:
            #(0 1 2)
          VALUES:
            #(cube_BBTG cube_BBTG_form box_B2)]
       [ONTOLOGENIUSSPARQLRESPONSE
          NAMES:
            #(0 1 2)
          VALUES:
            #(cube_GBTG cube_GBTG_form box_B4)])
   ERROR:
     ]
I am not sure of what you are speaking about...

new context set:
#(?0 isAbove table_1 ?0 isInContainer ?2 ?2 isA VisibleDtBox ?0 isA Cube
  ?0 hasColor blue ?0 hasGraphicalEntity ?1 ?1 isA Triangle ?1 hasColor green)
triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     isAbove
   ON:
     table_1]
triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     isInContainer
   ON:
     ?2]
triplet :
[TRIPLET
   FROM:
     ?2
   RELATION:
     isA
   ON:
     VisibleDtBox]
triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     isA
   ON:
     Cube]
triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     hasColor
   ON:
     blue]
triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     hasGraphicalEntity
   ON:
     ?1]
triplet :
[TRIPLET
   FROM:
     ?1
   RELATION:
     isA
   ON:
     Triangle]
triplet :
[TRIPLET
   FROM:
     ?1
   RELATION:
     hasColor
   ON:
     green]resp disambiguate :[DISAMBIGUATION-RESPONSE
                                 SUCCESS:
                                   T
                                 RESULT:
                                   #([TRIPLET
                                        FROM:
                                          cube_BBTG_form
                                        RELATION:
                                          isA
                                        ON:
                                          Triangle]
                                     [TRIPLET
                                        FROM:
                                          cube_BBTG
                                        RELATION:
                                          hasFigure
                                        ON:
                                          cube_BBTG_form]
                                     [TRIPLET
                                        FROM:
                                          cube_BBTG_border
                                        RELATION:
                                          hasColor
                                        ON:
                                          blue]
                                     [TRIPLET
                                        FROM:
                                          cube_BBTG
                                        RELATION:
                                          hasColor
                                        ON:
                                          blue]
                                     [TRIPLET
                                        FROM:
                                          cube_BBTG_border
                                        RELATION:
                                          isA
                                        ON:
                                          Border]
                                     [TRIPLET
                                        FROM:
                                          cube_BBTG
                                        RELATION:
                                          hasBorder
                                        ON:
                                          cube_BBTG_border]
                                     [TRIPLET
                                        FROM:
                                          cube_BBTG
                                        RELATION:
                                          isA
                                        ON:
                                          Cube])
                                 SPARQLRESULT:
                                   #(?0 isA Cube ?0 hasBorder ?1 ?1 isA Border
                                     ?0 hasColor blue ?1 hasColor blue
                                     ?0 hasFigure ?2 ?2 isA Triangle)
                                 AMBIGUOUS:
                                   #()]
Sparql result: 
#(?0 isA Cube ?0 hasBorder ?1 ?1 isA Border ?0 hasColor blue ?1 hasColor blue
  ?0 hasFigure ?2 ?2 isA Triangle)
sparql : #(?0 isA Cube ?0 hasBorder ?1 ?1 isA Border ?0 hasColor blue
           ?1 hasColor blue ?0 hasFigure ?2 ?2 isA Triangle)
the context is:
#(?0 isAbove table_1 ?0 isInContainer ?2 ?2 isA VisibleDtBox ?0 isA Cube
  ?0 hasColor blue ?0 hasGraphicalEntity ?1 ?1 isA Triangle ?1 hasColor green)Waiting for KSP merge
query: #(?0 isA Cube ?0 hasBorder ?1 ?1 isA Border ?0 hasColor blue
         ?1 hasColor blue ?0 hasFigure ?2 ?2 isA Triangle)
ctx: #(?0 isAbove table_1 ?0 isInContainer ?2 ?2 isA VisibleDtBox ?0 isA Cube
       ?0 hasColor blue ?0 hasGraphicalEntity ?1 ?1 isA Triangle
       ?1 hasColor green)
merge response: 
[MERGE-RESPONSE
   MERGED_QUERY:
     #(?0 isA Cube ?0 hasBorder ?1 ?1 isA Border ?0 hasColor blue
       ?1 hasColor blue ?0 hasFigure ?2 ?2 isA Triangle)]Question part : the blue block ,with a blue border and with a triangle 

triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     isAbove
   ON:
     table_1]
triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     isInContainer
   ON:
     ?2]
triplet :
[TRIPLET
   FROM:
     ?2
   RELATION:
     isA
   ON:
     VisibleDtBox]
triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     isA
   ON:
     Cube]
triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     hasColor
   ON:
     blue]
triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     hasGraphicalEntity
   ON:
     ?1]
triplet :
[TRIPLET
   FROM:
     ?1
   RELATION:
     isA
   ON:
     Triangle]
triplet :
[TRIPLET
   FROM:
     ?1
   RELATION:
     hasColor
   ON:
     green]resp disambiguate :[DISAMBIGUATION-RESPONSE
                                 SUCCESS:
                                   NIL
                                 RESULT:
                                   #()
                                 SPARQLRESULT:
                                   #()
                                 AMBIGUOUS:
                                   #(cube_GBTG_2)]
Sparql result: 
#()not understand
sparql : #(?0 isA Cube ?0 hasBorder ?1 ?1 isA Border ?0 hasColor blue
           ?1 hasColor blue ?0 hasFigure ?2 ?2 isA Triangle)
the context is:
#(?0 isAbove table_1 ?0 isInContainer ?2 ?2 isA VisibleDtBox ?0 isA Cube
  ?0 hasColor blue ?0 hasGraphicalEntity ?1 ?1 isA Triangle ?1 hasColor green)Waiting for KSP merge
query: #(?0 isA Cube ?0 hasBorder ?1 ?1 isA Border ?0 hasColor blue
         ?1 hasColor blue ?0 hasFigure ?2 ?2 isA Triangle)
ctx: #(?0 isAbove table_1 ?0 isInContainer ?2 ?2 isA VisibleDtBox ?0 isA Cube
       ?0 hasColor blue ?0 hasGraphicalEntity ?1 ?1 isA Triangle
       ?1 hasColor green)
merge response: 
[MERGE-RESPONSE
   MERGED_QUERY:
     #(?0 isA Cube ?0 hasBorder ?1 ?1 isA Border ?0 hasColor blue
       ?1 hasColor blue ?0 hasFigure ?2 ?2 isA Triangle)]Question part : the blue block ,with a blue border and with a triangle 
Do you mean : the blue block ,with a blue border and with a triangle , or, the blue block ,with a blue border and with a triangle ?
NIL
"the blue block ,with a blue border and with a triangle , or, the blue block ,with a blue border and with a triangle "


DT> (dt::designate-cube
              "pick the blue cube with a green triangle")
Waiting for KSP Understand
understand response: 
[UNDERSTAND-RESPONSE
   SPARQLQUERY:
     #(?0 isA Cube ?0 hasColor blue ?0 hasGraphicalEntity ?1 ?1 isA Triangle
       ?1 hasColor green)
   ACTION:
     Pick
   COMPREHENSION_SCORE:
     1.0d0
   ANALYSE_SCORE:
     1.0d0]Waiting for KSP merge
query: #(?0 isA Cube ?0 hasColor blue ?0 hasGraphicalEntity ?1 ?1 isA Triangle
         ?1 hasColor green)
ctx: #(?0 isAbove table_1 ?0 isInContainer ?1 ?1 isA VisibleDtBox)
merge response: 
[MERGE-RESPONSE
   MERGED_QUERY:
     #(?0 isAbove table_1 ?0 isInContainer ?2 ?2 isA VisibleDtBox
       ?0 isA Cube ?0 hasColor blue ?0 hasGraphicalEntity ?1 ?1 isA Triangle
       ?1 hasColor green)]#(?0 isAbove table_1 ?0 isInContainer ?2
                            ?2 isA VisibleDtBox ?0 isA Cube ?0 hasColor blue
                            ?0 hasGraphicalEntity ?1 ?1 isA Triangle
                            ?1 hasColor green)
?0 isAbove table_1, ?0 isInContainer ?2, ?2 isA VisibleDtBox, ?0 isA Cube, ?0 hasColor blue, ?0 hasGraphicalEntity ?1, ?1 isA Triangle, ?1 hasColor green
ontology results: 
[ONTOLOGENIUSSPARQLSERVICE-RESPONSE
   RESULTS:
     #([ONTOLOGENIUSSPARQLRESPONSE
          NAMES:
            #(0 1 2)
          VALUES:
            #(cube_GBTG cube_GBTG_form box_C2)]
       [ONTOLOGENIUSSPARQLRESPONSE
          NAMES:
            #(0 1 2)
          VALUES:
            #(cube_BBTG cube_BBTG_form box_C3)])
   ERROR:
     ]
I am not sure of what you are speaking about...

new context set:
#(?0 isAbove table_1 ?0 isInContainer ?2 ?2 isA VisibleDtBox ?0 isA Cube
  ?0 hasColor blue ?0 hasGraphicalEntity ?1 ?1 isA Triangle ?1 hasColor green)
triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     isAbove
   ON:
     table_1]
triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     isInContainer
   ON:
     ?2]
triplet :
[TRIPLET
   FROM:
     ?2
   RELATION:
     isA
   ON:
     VisibleDtBox]
triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     isA
   ON:
     Cube]
triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     hasColor
   ON:
     blue]
triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     hasGraphicalEntity
   ON:
     ?1]
triplet :
[TRIPLET
   FROM:
     ?1
   RELATION:
     isA
   ON:
     Triangle]
triplet :
[TRIPLET
   FROM:
     ?1
   RELATION:
     hasColor
   ON:
     green]resp disambiguate :[DISAMBIGUATION-RESPONSE
                                 SUCCESS:
                                   NIL
                                 RESULT:
                                   #()
                                 SPARQLRESULT:
                                   #()
                                 AMBIGUOUS:
                                   #(cube_GBTG_2)]
Sparql result: 
#()not understand
sparql : #(?0 isA Cube ?0 hasBorder ?1 ?1 isA Border ?0 hasColor blue
           ?1 hasColor blue ?0 hasFigure ?2 ?2 isA Circle)
the context is:
#(?0 isAbove table_1 ?0 isInContainer ?2 ?2 isA VisibleDtBox ?0 isA Cube
  ?0 hasColor blue ?0 hasGraphicalEntity ?1 ?1 isA Triangle ?1 hasColor green)Waiting for KSP merge
query: #(?0 isA Cube ?0 hasBorder ?1 ?1 isA Border ?0 hasColor blue
         ?1 hasColor blue ?0 hasFigure ?2 ?2 isA Circle)
ctx: #(?0 isAbove table_1 ?0 isInContainer ?2 ?2 isA VisibleDtBox
       ?0 isA Cube ?0 hasColor blue ?0 hasGraphicalEntity ?1 ?1 isA Triangle
       ?1 hasColor green)
merge response: 
[MERGE-RESPONSE
   MERGED_QUERY:
     #(?0 isA Cube ?0 hasBorder ?1 ?1 isA Border ?0 hasColor blue
       ?1 hasColor blue ?0 hasFigure ?2 ?2 isA Circle)]Question part : the blue block ,with a blue border and with a circle 

triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     isAbove
   ON:
     table_1]
triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     isInContainer
   ON:
     ?2]
triplet :
[TRIPLET
   FROM:
     ?2
   RELATION:
     isA
   ON:
     VisibleDtBox]
triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     isA
   ON:
     Cube]
triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     hasColor
   ON:
     blue]
triplet :
[TRIPLET
   FROM:
     ?0
   RELATION:
     hasGraphicalEntity
   ON:
     ?1]
triplet :
[TRIPLET
   FROM:
     ?1
   RELATION:
     isA
   ON:
     Triangle]
triplet :
 , [TRIPLET
   FROM:
     ?1
   RELATION:
     hasColor
   ON:
     green]resp disambiguate :[DISAMBIGUATION-RESPONSE
                                 SUCCESS:
                                   T
                                 RESULT:
                                   #([TRIPLET
                                        FROM:
                                          cube_BBTG_form
                                        RELATION:
                                          isA
                                        ON:
                                          Triangle]
                                     [TRIPLET
                                        FROM:
                                          cube_BBTG
                                        RELATION:
                                          hasFigure
                                        ON:
                                          cube_BBTG_form]
                                     [TRIPLET
                                        FROM:
                                          cube_BBTG_border
                                        RELATION:
                                          hasColor
                                        ON:
                                          blue]
                                     [TRIPLET
                                        FROM:
                                          cube_BBTG
                                        RELATION:
                                          hasColor
                                        ON:
                                          blue]
                                     [TRIPLET
                                        FROM:
                                          cube_BBTG_border
                                        RELATION:
                                          isA
                                        ON:
                                          Border]
                                     [TRIPLET
                                        FROM:
                                          cube_BBTG
                                        RELATION:
                                          hasBorder
                                        ON:
                                          cube_BBTG_border]
                                     [TRIPLET
                                        FROM:
                                          cube_BBTG
                                        RELATION:
                                          isA
                                        ON:
                                          Cube])
                                 SPARQLRESULT:
                                   #(?0 isA Cube ?0 hasBorder ?1 ?1 isA Border
                                     ?0 hasColor blue ?1 hasColor blue
                                     ?0 hasFigure ?2 ?2 isA Triangle)
                                 AMBIGUOUS:
                                   #()]
Sparql result: 
#(?0 isA Cube ?0 hasBorder ?1 ?1 isA Border ?0 hasColor blue ?1 hasColor blue
  ?0 hasFigure ?2 ?2 isA Triangle)
sparql : #(?0 isA Cube ?0 hasBorder ?1 ?1 isA Border ?0 hasColor blue
           ?1 hasColor blue ?0 hasFigure ?2 ?2 isA Triangle)
the context is:
#(?0 isAbove table_1 ?0 isInContainer ?2 ?2 isA VisibleDtBox ?0 isA Cube
  ?0 hasColor blue ?0 hasGraphicalEntity ?1 ?1 isA Triangle ?1 hasColor green)Waiting for KSP merge
query: #(?0 isA Cube ?0 hasBorder ?1 ?1 isA Border ?0 hasColor blue
         ?1 hasColor blue ?0 hasFigure ?2 ?2 isA Triangle)
ctx: #(?0 isAbove table_1 ?0 isInContainer ?2 ?2 isA VisibleDtBox
       ?0 isA Cube ?0 hasColor blue ?0 hasGraphicalEntity ?1 ?1 isA Triangle
       ?1 hasColor green)
merge response: 
[MERGE-RESPONSE
   MERGED_QUERY:
     #(?0 isA Cube ?0 hasBorder ?1 ?1 isA Border ?0 hasColor blue
       ?1 hasColor blue ?0 hasFigure ?2 ?2 isA Triangle)]Question part : the blue block ,with a blue border and with a triangle 
Do you mean : the blue block ,with a blue border and with a circle , or, the blue block ,with a blue border and with a triangle ?
NIL
"the blue block ,with a blue border and with a circle , or, the blue block ,with a blue border and with a triangle "
"Pick"

'?0 isAbove table_1 , ?0 isInContainer ?3 , ?3 isA VisibleDtBox , ?0 isA Cube , ?0 hasColor blue , ?0 hasGraphicalEntity ?1 , ?1 isA Triangle , ?1 hasColor green , ?1 hasGraphicalEntity ?2 , ?2 isA Border , ?2 hasColor blue'


(defun designate-cube (sentences)
 (setf *table* "table_1")
    (setq *ctx-designate* (vector (format nil "?0 isAbove ~a" *table*)
                                "?0 isInContainer ?1" "?1 isA VisibleDtBox"))

    (let ((response-understand-srv (call-understand-srv sentences)))
        (setq *action* (msg-slot-value response-understand-srv :ACTION))
        (setq *sparql* (msg-slot-value response-understand-srv :SPARQLQUERY)))           
    (let ((response-merge-srv (call-merge-srv *sparql* *ctx-designate* nil)))
        (setq *merge-sparql* (msg-slot-value response-merge-srv :MERGED_QUERY)))
    (let ((response-sparql-srv (call-sparql-srv *merge-sparql*)))
         (setq *matches* (msg-slot-value response-sparql-srv :RESULTS)))
     (princ (format nil "these are the matched sparql ~a" *matches*))(terpri)
    (cond
        ((> (length *matches*) 1)
         (progn
             (terpri)(princ "I am not sure of what you are speaking about...")(terpri)
             (setq *new-context* *merge-sparql*) 
             (setq *question* ""))
         (terpri)(princ "new context set:")(terpri)(princ *new-context*)
                (loop for match in (coerce *matches* 'list) do
                        (terpri)(princ (format nil "match found: ~a" match))
                        (let ((response-disambiguate-srv (call-disambiguate-srv match *new-context*)))
                            (setq *sparql-result* (msg-slot-value response-disambiguate-srv :SPARQLRESULT))
                            (setq *ambiguous* (msg-slot-value response-disambiguate-srv :AMBIGUOUS)))
                        (terpri)(princ "Sparql result: ")(terpri) (princ *sparql-result*)
                        (cond
                            ((not (coerce *ambiguous*  'list))
                             (setq *match-sparql* *sparql-result*))
                            ((progn
                                (setq *result* "not understand")
                                (princ *result*)
                                (values *state* *result* *action*))))
                        (terpri)(princ "sparql : ")(princ *match-sparql*)(terpri)(princ "the context is:")
                            (terpri)(princ *new-context*)
                            (let ((response-merge-match-srv (call-merge-srv *sparql-result* *new-context* t)))
                                (setq *match-sparql* (msg-slot-value response-merge-match-srv :MERGED_QUERY)))
                                (princ (format nil "this is the matched sparql ~a" *match-sparql*))(terpri)
                            (let ((response-verbalize-srv (call-verbalize-srv *match-sparql*)))
                                (setq *question-part* (msg-slot-value response-verbalize-srv :VERBALIZATION)))
                            (princ "Question part : ")(princ *question-part*)(terpri)
                        (cond
                            ((string= *question* "")
                             (setq *question*  *question-part*))
                            ((setq *question*  (concatenate 'string *question* ", or, " *question-part*)))))
            (princ "Do you mean : ") (princ *question*)(princ "?")
            (setq *ctx-designate* *new-context*)
            (values *state* *question* *action*))

        ((= (length *matches*) 1)
         (progn
             (terpri)(princ "cube find:")(terpri)(princ *matches*)
             (setq *ctx-designate* nil)
             (setq *state* t)
             (values *state* *matches* *action*)))

        ((progn
            (setq *result* "not understand")
            (princ *result*) (terpri)
            (setq *state* nil)
            (values *state* *result* *action*))))))